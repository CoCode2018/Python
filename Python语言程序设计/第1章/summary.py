"""
第一章：计算机、程序和Python概念

1.引言
    驾驭一个大型的软件开发工具“军火库”
    关键是学习如何使用程序设计方法解决问题
2.计算机硬件、程序和操作系统的基本理解
    更好的理解程序的指令在计算机和它的组件上所起的效果
    总线连接，CPU、内存、存储设备、输入设备、输出设备、通信设备
    数据和电信号沿着总线从计算机中的一个部分传送到另一个部分；
    个人计算机中：总线被内嵌在计算机主板上，主板是将所有部件连接在一起的电路板
    CPU：
        控制单元(协调其他组件)、算数逻辑单元(进行算术运算和逻辑运算)
        每台计算机都有一个内部时钟，该时钟会以一个稳定的速度发射电子脉冲，这些脉冲用于控制盒永不各种操作的步调。
        时钟速度越快改定时间段内执行的指令就越多，时钟速度计量单位为赫兹，1赫兹 = 每秒1个赫兹(1兆赫 = 100万赫兹)
        CUP的核心，core是处理器中完成读取指令和执行指令的部分，为了提高处理能力出现多核CPU
    内存：
        比特和字节
            二进制数字称为比特，计算机中最小的存储单元是字节，一个字节 = 8个比特
            各种数据被编码成一个字节序列，计算机系统根据编码表自动完成编码和解码
            编码表是一套规则，用于控制计算机如何将字符、数字、符合翻译成计算机真正能够使用的数据
        内存(RAM)
            内存由多个有序地字节序列组成，用来存储程序和程序使用的数据，程序和数据必须加载到内存才能执行
            内存中的每个字节都有一个唯一的地址，通过地址可以定位存储和获取数据的字节
            因为可以任意顺序方位内存中的字节，内存也被称为随机访问存储器(RAM)
        存储设备
            内存中的数据不稳定，断电后内存中的数据全都丢失，程序和数据永久的保存在存储设备上，当运行和需要他们的时候被自动载入到内存
            内存的执行速度比存储设备快得多
            存储介质：存储数据或程序指令的地方
            驱动器：从存储介质上读取和写入的工具
            磁盘驱动器
            光盘驱动器
            USB闪存
        输入设备
            键盘
            鼠标
        输出设备
            显示器
            打印机
        通信设备
            无线适配去
            有限网络接口卡
            调制解调器
    程序设计语言
        机器语言
        汇编语言、汇编器(将汇编语言翻译机器代码)【低级语言：汇编语言的每条指令对应机器代码编写的指令，本质上更接近机器语言(不同机器的指令集不同)而不是独立于机器】
        高级语言：独立于机器平台，可以跨平台，每一条指令称为语句
            使用高级语言编写的程序称为源程序或源代码，计算机并不能理解这些源程序，因此需要编译器或者解释器，将源代码翻译成计算机能够理解和执行的机器代码
                解释器，从源代码中读取一条语句，将它翻译成机器代码或者虚拟机代码，然后执行
                编译器，将整个源代码翻译组成机器代码，然后执行
    操作系统
        多程序设计(多个程序之间共享CPU同步运行)
        多线程：单个程序可以同时执行多个任务
            一个程序可以边做这个边做那个
            进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。
            Linux系统函数fork()可以在父进程中创建一个子进程，这样的话，在一个进程接到来自客户端新的请求时就可以复制出一个子进程让其来处理，父进程只需负责监控请求的到来，然后创建子进程让其去处理，这样就能做到并发处理。
        多进程：并行处理，使用多个处理器一起完成同时发生的多个子任务
            为了完成一个任务需要同时做
            线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。
3.Python的历史
    新西兰  Guido van Rossum
4.Python程序的基本语法
    Python是解释性语言，由解释器一次执行一条语句
    python注释
        # 行注释
        三引号(单引号、双引号)  段注释
5.编写运行Python程序
6.Python程序设计风格和文档
    好的程序风格和正确的文档可以让程序已读并防止出错
    正确执行、易于阅读、便于理解
    文档：解释性备注和注释的主体

    程序开始的地方要有一个总结性的注释，解释程序干什么的、重要特征、所使用的独特技术
    使用注释介绍主要步骤和难以读懂的内容，不要密密麻麻和难以阅读
    一致的空格风格
7.语法错误、运行时错误、逻辑错误
    语法错误(SyntaxError)，可以检测出来，python可以检测出错的地方和原因
    运行时错误，python解释器检测到一个不可能执行的操作(如：整数、字符串，1/0)
    逻辑错误，不能完成预期目的
8.Turtle创建图形程序
    Turtle是Python内置的图形模块
    Tkinter用来开发复杂的图形用户界面应用程序
"""